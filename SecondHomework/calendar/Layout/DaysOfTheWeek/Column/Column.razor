@using Calendar.Models
@using System.Collections.Generic
@using System.Text
@using Calendar.Services
@using Newtonsoft.Json
@inject DataService Ds
@inject HttpClient Http
@inject DateCalculatorService Dc
<div class="column-container">
    <h4>@DayOfTheWeek</h4>

    @if (EventsOfTheDay != null)
    {

        @foreach (var t in EventsOfTheDay)
        {
            <div class="event" @onclick="()=> ShowEventModal(t)">
                <h5>@t.name</h5>
                <p>@t.begins.ToShortTimeString() - @t.ends.ToShortTimeString()</p>
                <p>@t.description</p>
            </div>
        }
    }
</div>

@if (_selectedEvent != null)
{
    <div class="modal" style="display: @_modalDisplay;">
        <div class="modal-content">
            <h2>Edit Event</h2>
            <input type="text" @bind="_selectedEvent.name" />
            <input type="text" @bind="_selectedEvent.begins" />
            <input type="text" @bind="_selectedEvent.ends" />
            <textarea @bind="_selectedEvent.description"></textarea>
            <button @onclick="SaveChanges">Submit</button>
            <button @onclick="CancelChanges">Cancel</button> <!-- Cancel button added -->
            <button @onclick="DeleteEvent">Delete</button>

        </div>
    </div>
}

@code {
    [Parameter]
    public string DayOfTheWeek { get; set; }

    private List<EventModel> EventsOfTheDay { get; set; }
    private EventModel? _selectedEvent = new EventModel
    {
        id = Guid.Empty,
        name = "",
        begins = DateTime.Now,
        ends = DateTime.Now,
        description = ""
    };
    private EventModel? _originalEvent = new EventModel
    {
        id = Guid.Empty,
        name = "",
        begins = DateTime.Now,
        ends = DateTime.Now,
        description = ""
    };
    private string _modalDisplay = "none";


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        EventsOfTheDay = [];
        FillEvents();
        Ds.DataFetched += HandleDataFetched;

        _originalEvent = new EventModel();
        _selectedEvent = new EventModel();

    }

    private void HandleDataFetched(object sender, EventArgs e)
    {
        // Update data or trigger a re-rendering
        FillEvents();
        StateHasChanged();
    }

    private void FillEvents()
    {
        try
        {
            var currentDay = Dc.DayOfTheWeekToDateTime(DayOfTheWeek, Ds.Date);
            EventsOfTheDay = [];
            var guidSet = new HashSet<Guid>();

            foreach (var t in Ds.Events)
            {
                if(t.begins <= currentDay && t.ends >= currentDay)
                {
                    if (guidSet.Contains(t.id))
                    {
                        continue;
                    }

                    guidSet.Add(t.id);
                    EventsOfTheDay.Add(t);
                }
            }

        }catch(Exception )
        {
        }

    }

    // Method to show the modal and set selectedEvent
    private void ShowEventModal(EventModel eventModel)
    {
        _selectedEvent = eventModel;
        _modalDisplay = "block";
        _originalEvent = new EventModel
        {
            id = eventModel.id,
            name = eventModel.name,
            begins = eventModel.begins,
            ends = eventModel.ends,
            description = eventModel.description
        };
    }

    // Method to save changes made in the modal
    private async Task SaveChanges()
    {
        bool patch = true;
        if (_selectedEvent.name != _originalEvent.name)
        {
            _originalEvent.name = _selectedEvent.name;
            patch = false;
        }

        if (_selectedEvent.begins != _originalEvent.begins)
        {
            _originalEvent.begins = _selectedEvent.begins;
            patch = false;
        }

        if (_selectedEvent.ends != _originalEvent.ends)
        {
            _originalEvent.ends = _selectedEvent.ends;
            patch = false;
        }

        if (patch)
        {
            var url = "http://localhost:5144/api/Calendar/event/" + _selectedEvent.id;

            //make a json body from the selectedEvent description
            var jsonDescription = "{\"description\":\"" + _selectedEvent.description + "\"}";
            var content = new StringContent(jsonDescription, Encoding.UTF8, "application/json");

            //send a patch request to the server
            var response = await Http.PatchAsync(url, content);
            if (response.IsSuccessStatusCode)
            {
                // Update the originalEvent with the selectedEvent
                _originalEvent = _selectedEvent;
            }
        }
        else
        {
            // Update the originalEvent with the selectedEvent
            _originalEvent = _selectedEvent;

            //serialize the whole object as a json
            var json = JsonConvert.SerializeObject(_selectedEvent);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            //send a put request to the server
            var response = await Http.PutAsync("http://localhost:5144/api/Calendar/event/" + _selectedEvent.id, content);

            if (response.IsSuccessStatusCode)
            {
                // Update the originalEvent with the selectedEvent
                _originalEvent = _selectedEvent;
            }


        }

        _modalDisplay = "none";
        Ds.OnDataFetched(EventArgs.Empty);
    }

    private void CancelChanges()
    {
        // Reset any changes made to the selectedEvent if necessary
        // For example, you might reload the event details from the server
        // Reset the modalDisplay to hide the modal
        _modalDisplay = "none";
    }

    private async Task DeleteEvent()
    {
        var url = "http://localhost:5144/api/Calendar/event/" + _selectedEvent.id;
        var response = await Http.DeleteAsync(url);
        if (response.IsSuccessStatusCode)
        {
            // If deletion is successful, reset selectedEvent and hide modal
            _selectedEvent = null;
            _modalDisplay = "none";
        }
        else
        {
            // Handle deletion failure
        }
        Ds.OnDataFetched(EventArgs.Empty);
    }
}